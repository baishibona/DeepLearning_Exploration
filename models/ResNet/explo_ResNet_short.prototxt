name: "ResNet-short"

layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mean_file: "examples/explo_resnet/explo_mean.binaryproto"
  }
  data_param {
    source: "examples/explo_resnet/explo_train_lmdb"
    batch_size: 16
    backend: LMDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mean_file: "examples/explo_resnet/explo_mean.binaryproto"
  }
  data_param {
    source: "examples/explo_resnet/explo_val_lmdb"
    batch_size: 32
    backend: LMDB
  }
}

layer {
	bottom: "data"
	top: "conv1"
	name: "conv1"
	type: "Convolution"
	convolution_param {
		num_output: 64
		kernel_size: 7
		pad: 3
		stride: 2
	}
}
layer {
	bottom: "conv1"
	top: "conv1"
	name: "bn_conv1"
	type: "BatchNorm"
	batch_norm_param {
		use_global_stats: true
	}
}
layer {
	bottom: "conv1"
	top: "conv1"
	name: "scale_conv1"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
	bottom: "conv1"
	top: "conv1"
	name: "conv1_relu"
	type: "ReLU"
}

layer {
	bottom: "conv1"
	top: "pool1"
	name: "pool1"
	type: "Pooling"
	pooling_param {
		kernel_size: 2
		stride: 2
		pool: MAX
	}
}

# First ResNet layer
layer {
	bottom: "pool1"
	top: "res1a_branch1a"
	name: "res1a_branch1a"
	type: "Convolution"
	convolution_param {
		num_output: 32
		kernel_size: 3
		pad: 1
		stride: 1
		bias_term: false
	}
}
layer {
	bottom: "res1a_branch1a"
	top: "res1a_branch1a"
	name: "bn1a_branch1a"
	type: "BatchNorm"
	batch_norm_param {
		use_global_stats: true
	}
}
layer {
	bottom: "res1a_branch1a"
	top: "res1a_branch1a"
	name: "scale1a_branch1a"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
	bottom: "res1a_branch1a"
	top: "res1a_branch1a"
	name: "res1a_branch1a_relu"
	type: "ReLU"
}

layer {
	bottom: "res1a_branch1a"
	top: "res1a_branch1b"
	name: "res1a_branch1b"
	type: "Convolution"
	convolution_param {
		num_output: 64
		kernel_size: 3
		pad: 1
		stride: 1
		bias_term: false
	}
}
layer {
	bottom: "res1a_branch1b"
	top: "res1a_branch1b"
	name: "bn1a_branch1b"
	type: "BatchNorm"
	batch_norm_param {
		use_global_stats: true
	}
}

layer {
	bottom: "res1a_branch1b"
	top: "res1a_branch1b"
	name: "scale1a_branch1b"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
	bottom: "res1a_branch1b"
	top: "res1a_branch1b"
	name: "res1a_branch1b_relu"
	type: "ReLU"
}

layer {
	bottom: "res1a_branch1b"
	bottom: "pool1"
	top: "res2a"
	name: "res2a"
	type: "Eltwise"
}
layer {
	bottom: "res2a"
	top: "res2a"
	name: "res2a_relu"
	type: "ReLU"
}


# second ResNet
layer {
	bottom: "res2a"
	top: "res2a_branch2a"
	name: "res2a_branch2a"
	type: "Convolution"
	convolution_param {
		num_output: 32
		kernel_size: 3
		pad: 1
		stride: 1
		bias_term: false
	}
}
layer {
	bottom: "res2a_branch2a"
	top: "res2a_branch2a"
	name: "bn2a_branch2a"
	type: "BatchNorm"
	batch_norm_param {
		use_global_stats: true
	}
}
layer {
	bottom: "res2a_branch2a"
	top: "res2a_branch2a"
	name: "scale2a_branch2a"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
	bottom: "res2a_branch2a"
	top: "res2a_branch2a"
	name: "res2a_branch2a_relu"
	type: "ReLU"
}

layer {
	bottom: "res2a_branch2a"
	top: "res2a_branch2b"
	name: "res2a_branch2b"
	type: "Convolution"
	convolution_param {
		num_output: 64
		kernel_size: 3
		pad: 1
		stride: 1
		bias_term: false
	}
}
layer {
	bottom: "res2a_branch2b"
	top: "res2a_branch2b"
	name: "bn2a_branch2b"
	type: "BatchNorm"
	batch_norm_param {
		use_global_stats: true
	}
}

layer {
	bottom: "res2a_branch2b"
	top: "res2a_branch2b"
	name: "scale2a_branch2b"
	type: "Scale"
	scale_param {
		bias_term: true
	}
}
layer {
	bottom: "res2a_branch2b"
	top: "res2a_branch2b"
	name: "res2a_branch2b_relu"
	type: "ReLU"
}

layer {
	bottom: "res2a_branch2b"
	bottom: "res2a"
	top: "res3a"
	name: "res3a"
	type: "Eltwise"
}

# final FC layer

layer {
	bottom: "res3a"
	top: "fc1"
	name: "fc1"
	type: "InnerProduct"
	inner_product_param {
	num_output: 512
    weight_filler {
      type: "gaussian"
      std: 0.01
      }
    bias_filler {
      type: "constant"
      value: 0
      }
	}
}
layer {
	bottom: "fc1"
	top: "fc36"
	name: "fc36"
	type: "InnerProduct"
	inner_product_param {
		num_output: 36
	}
}

layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc36"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc36"
  bottom: "label"
  top: "loss"
}
